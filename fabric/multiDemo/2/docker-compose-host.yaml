version: '2'

volumes:
  orderer2.example.com:
  peer1.org1.example.com:
  peer1.org2.example.com:
  couchdb1:
  couchdb2:
networks:
  byfn:

services:
  orderer2.example.com:
    extends:
      file: base/peer-base.yaml
      service: orderer-base
    container_name: orderer2.example.com
    networks:
    - byfn
    volumes:
        - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
        - ./crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/msp:/var/hyperledger/orderer/msp
        - ./crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/:/var/hyperledger/orderer/tls
        - orderer2.example.com:/var/hyperledger/production/orderer
    ports:
    - 7050:7050
    extra_hosts:
      - "orderer1.example.com:10.108.26.227"
      - "orderer3.example.com:10.108.26.229"
      - "peer0.org1.example.com:10.108.26.227"
      - "peer0.org2.example.com:10.108.26.229"
  couchdb1:
    container_name: couchdb1
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    volumes:
      - couchdb1:/opt/couchdb/data
    ports:
      - "5984:5984"
    networks:
      - byfn
    extra_hosts:
      - "orderer1.example.com:10.108.26.227"
      - "orderer3.example.com:10.108.26.229"
      - "peer0.org1.example.com:10.108.26.227"
      - "peer0.org2.example.com:10.108.26.229"
  couchdb2:
    container_name: couchdb2
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    volumes:
      - couchdb2:/opt/couchdb/data
    ports:
      - "6984:5984"
    networks:
      - byfn
    extra_hosts:
      - "orderer1.example.com:10.108.26.227"
      - "orderer3.example.com:10.108.26.229"
      - "peer0.org1.example.com:10.108.26.227"
      - "peer0.org2.example.com:10.108.26.229"

  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    extends:
      file: base/peer-base.yaml
      service: peer-base
    networks:
      - byfn
    environment:
      - CORE_PEER_ID=peer1.org1.example.com     # peer节点的编号
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7051   # 当前peer节点的访问地址
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052   # chaincode的监听地址
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051  # 启动节点后向哪些节点发起gossip连接, 以加入网络,这些节点与本地节点需要属于同一个网络
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051 # 节点被组织外节点感知时的地址
      - CORE_PEER_LOCALMSPID=Org1MSP  # peer节点所属的组织的编号, 在configtxgen.yaml中设置的
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb1:5984
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB.  The username and password must
      # match the username and password set for the associated CouchDB.
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp
        - ./crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls
        - peer1.org1.example.com:/var/hyperledger/production
    ports:
      - 7051:7051
    depends_on:
      - couchdb1
    extra_hosts:
      - "orderer1.example.com:10.108.26.227"
      - "orderer3.example.com:10.108.26.229"
      - "peer0.org1.example.com:10.108.26.227"
      - "peer0.org2.example.com:10.108.26.229"

  peer1.org2.example.com:
    container_name: peer1.org2.example.com
    extends:
      file: base/peer-base.yaml
      service: peer-base
    networks:
      - byfn
    environment:
      - CORE_PEER_ID=peer1.org2.example.com     # peer节点的编号
      - CORE_PEER_ADDRESS=peer1.org2.example.com:8051   # 当前peer节点的访问地址
      - CORE_PEER_LISTENADDRESS=0.0.0.0:8051
      - CORE_PEER_CHAINCODEADDRESS=peer1.org2.example.com:8052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052   # chaincode的监听地址
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:7051  # 启动节点后向哪些节点发起gossip连接, 以加入网络,这些节点与本地节点需要属于同一个网络
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:8051 # 节点被组织外节点感知时的地址
      - CORE_PEER_LOCALMSPID=Org2MSP  # peer节点所属的组织的编号, 在configtxgen.yaml中设置的
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb2:5984
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB.  The username and password must
      # match the username and password set for the associated CouchDB.
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp
        - ./crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/fabric/tls
        - peer1.org2.example.com:/var/hyperledger/production
    ports:
      - 8051:8051
    depends_on:
      - couchdb2
    extra_hosts:
      - "orderer1.example.com:10.108.26.227"
      - "orderer3.example.com:10.108.26.229"
      - "peer0.org1.example.com:10.108.26.227"
      - "peer0.org2.example.com:10.108.26.229"

  cli:
    container_name: cli
    image: hyperledger/fabric-tools:$IMAGE_TAG
    tty: true
    stdin_open: true
    environment:
      - SYS_CHANNEL=$SYS_CHANNEL
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      #- FABRIC_LOGGING_SPEC=DEBUG
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true
      - ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer1.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
        - /var/run/:/host/var/run/
        - ./chaincode/:/opt/gopath/src/github.com/chaincode
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      - orderer2.example.com
      - peer1.org1.example.com
    networks:
      - byfn
    extra_hosts:
      - "orderer1.example.com:10.108.26.227"
      - "orderer3.example.com:10.108.26.229"
      - "peer0.org1.example.com:10.108.26.227"
      - "peer0.org2.example.com:10.108.26.229"

